1.安装docker环境
yum install docker
service docker start
2.创建数据容器：
$ docker create \
   -v /opt/prometheus/data \ #各个模块在容器内的存放地址
   -v /opt/consul-data \     #各个模块在容器内的存放地址
   -v /var/lib/mysql \       #各个模块在容器内的存放地址
   -v /var/lib/grafana \     #各个模块在容器内的存放地址
   --name pmm-data \   #容器名
   percona/pmm-server:1.2.0 /bin/true #指定docker源和版本地址并设置退出码为0
    ##有可能网速很慢，需要配置国内加速桥
    ##打开这个网址https://www.daocloud.io/mirror#accelerator-doc，注册完后，刷新此页面，复制加速脚本如下：
    ##curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://cccccccc.m.daocloud.io #每个人的地址都不同。
    ##在CentOS下面进行执行。但是脚本好像有点毛病
    ##vim /etc/docker/daemon.json
    ##{"registry-mirrors": ["http://c69bbf2c.m.daocloud.io"]，}##脚本执行后，删除这个逗号，重启下docker服务
    ##systemctl restart docker
    ###或
    ##service docker restart
    ##重新创建数据容器

3.运行pmm容器
   docker run -d \              #-d指定容器在后台执行
     -p 8080:80 \               #-p将docker的80端口重定向到宿主机的8080端口
     --volumes-from pmm-data \  #数据源
     --name pmm-server \        #容器名
     --restart always \         #容器如果意外退出，自动重启容器
     percona/pmm-server:1.2.0   #容器源

4.运行`docker ps`查看容器
   $docker ps
   CONTAINER ID        IMAGE                      COMMAND                CREATED             STATUS              PORTS                           NAMES
   b4fd3beb8758        percona/pmm-server:1.2.0   "/opt/entrypoint.sh"   18 seconds ago      Up 17 seconds       443/tcp, 0.0.0.0:8080->80/tcp   pmm-server
   访问http://ip:8080已经看到PMM服务端主机的监控Linux项的监控了
5.安装被监控端
   yum install https://www.percona.com/redir/downloads/percona-release/redhat/percona-release-0.1-4.noarch.rpm
   yum install pmm-client
  连接到服务端
   pmm-admin config --server 192.168.100.2:8080 #若上面没有更改端口，这里就不需要加`:8080`
   输出如下：
   $ sudo pmm-admin config --server 192.168.100.1
   OK, PMM server is alive.

   PMM Server      | 192.168.100.1
   Client Name     | ubuntu-amd64
   Client Address  | 192.168.200.1

6.设置监控数据
    使用`pmm-admin add --help`查看支持添加的监控项
	输出如下：

    Available Commands:
    mysql            Add complete monitoring for MySQL instance (linux and mysql metrics, queries).
    linux:metrics    Add this system to metrics monitoring.
    mysql:metrics    Add MySQL instance to metrics monitoring.
    mysql:queries    Add MySQL instance to Query Analytics.
    mongodb          Add complete monitoring for MongoDB instance (linux and mongodb metrics).
    mongodb:metrics  Add MongoDB instance to metrics monitoring.
    mongodb:queries  Add MongoDB instance to Query Analytics.
    proxysql:metrics Add ProxySQL instance to metrics monitoring.

    监控项比较齐全包含了Linux本身的监控，MySQL数据与查询统计，MongoDB数据与查询统计，ProxySQL数据
	增加MySQL全部监控：
	 pmm-admin add mysql --user zabbix --password zabbix --host 127.0.0.1 --port 3306
	增加mongodb全部监控
	 pmm-admin add mongodb --uri mongodb://root:123456@192.168.1.1:27017/admin?authMechanism=SCRAM-SHA-1

7.查看本机已经开启的数据收集
     pmm-admin list
	输出如下
	pmm-admin 1.2.0
	PMM Server      | 192.168.100.228:8080
	Client Name     | monitor
	Client Address  | 192.168.100.135
	Service Manager | unix-systemv
	-------------- -------- ----------- -------- ------------------------------- ------------------------------------------
	SERVICE TYPE   NAME     LOCAL PORT  RUNNING  DATA SOURCE                     OPTIONS
	-------------- -------- ----------- -------- ------------------------------- ------------------------------------------
	mysql:queries  monitor  -           YES      zabbix:***@tcp(127.0.0.1:3306)  query_source=slowlog, query_examples=true
	linux:metrics  monitor  42000       YES      -
	mysql:metrics  monitor  42002       YES      zabbix:***@tcp(127.0.0.1:3306)
8.访问服务端web地址，已经可以看到图形了

9.修改grafana配置，修改匿名用户权限为viewer
    	/usr/sbin/grafana-server --homepath=/usr/share/grafana --config=/etc/grafana/grafana.ini cfg:default.paths.data=/var/lib/grafana cfg:default.paths.logs=/var/log/grafana cfg:default.paths.plugins=/var/lib/grafana/plugins cfg:default.server.root_url=%(protocol)s://%(domain)s:%(http_port)s/graph ENV_AUTH_BASIC

10.自定义被监控端主机名
    #先清理掉之前主机名的服务端缓存，否则会导致主机名重复
	pmm-admin purge mysql:queries
	pmm-admin linux:metrics
	#更改主机名
	pmm-admin config --client-name mysql-ip101-master





##docker中，数据持久化是个问题，可以考虑在外面定期对内部数据库进行xtrabackup
##docker常见操作命令：
docker ps                       #查看当前运行的容器
docker ps -a                    #查看所有的容器
docker start name或ID           #启动之前停止的容器
docker stop  name或ID           #停止容器
docker kill  name或ID           #强制停止容器
docker rm    name或ID           #删除容器

##将docker内部的时间与宿主机时间同步
docker cp /etc/localtime [name或ID]:/etc/localtime

##进入docker容器
docker exec -it [name或ID] /bin/sh
             -i 交互
			 -t tty


如果遇到创建容器提示iptables错误则：
在宿主机执行：

pkill docker

iptables -t nat -F

ifconfig docker0 down

yum -y install bridge-utils
brctl delbr docker0

docker -d

systmctl restart docker
重启docker服务
